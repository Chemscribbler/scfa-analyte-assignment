"0","#Make a reference table for each column"
"0","#Reference table is make by taking the controls and doing some filtering for low/extraneous peaks"
"0","front_reftable <- reformated_data %>% filter(SampleType == ""Control"", grepl(""CM"",Well),grepl(""G"",Exp),!is.na(RT),"
"0","                !(ColID %% 2 == 0 & RT < 2.2),Area > 40, ColID %% 2 == 0) %>%"
"0","  group_by(ControlNum,PlateID) %>% "
"0","  slice(1:11) %>% "
"0","  mutate(PeakNumber = row_number()) %>%"
"0","  left_join(y = PeaktoCompound_ShortList_IS) %>% "
"0","  ungroup%>% "
"0","  group_by(ColID,Analyte) %>% "
"0","  summarise(RTmed = median(RT)) %>% "
"0","  mutate("
"0","      RTmin = RTmed - 0.022,"
"0","      RTmax = RTmed + 0.02,"
"0","      RTmax =if_else(Analyte == ""BA"", RTmax + 0.005,RTmax)"
"0","    ) %>% "
"0","    select(ColID,Analyte, RTmin, RTmax)"
"2","Joining, by = ""PeakNumber""
"
"2","Factor `Analyte` contains implicit NA, consider using `forcats::fct_explicit_na`"
"0","rear_reftable<- reformated_data %>% filter(SampleType == ""Control"",!is.na(RT),"
"0","                                           !(ColID %% 2 == 1 & RT < 1),Area > 40, ColID %% 2 == 1) %>%"
"0","  group_by(ControlNum,PlateID) %>% "
"0","  slice(1:11) %>% "
"0","  mutate(PeakNumber = row_number()) %>% "
"0","  left_join(y = PeaktoCompound_ShortList_IS) %>% "
"0","  ungroup%>% "
"0","  group_by(ColID,Analyte) %>% "
"0","  summarise(RTmed = median(RT)) %>% "
"0","  mutate("
"0","      RTmin = RTmed - 0.01,"
"0","      RTmax = RTmed + 0.02,"
"0","      RTmin = if_else(Analyte == ""AA""|Analyte == ""PA"",RTmin - 0.03, RTmin),"
"0","      RTmax = if_else(Analyte == ""AA""|Analyte == ""PA"",RTmax + 0.04, RTmax),"
"0","      RTmin = if_else(Analyte == ""AA"",RTmin - 0.02, RTmin),"
"0","      RTmax = if_else(Analyte == ""AA"",RTmax + 0.01, RTmax),"
"0","      Analyte = factor(Analyte, levels = scfa_levels)) %>% "
"0","  arrange(Analyte) %>% "
"0","  select(ColID,Analyte, RTmin, RTmax)"
"2","Joining, by = ""PeakNumber""
"
"2","Factor `Analyte` contains implicit NA, consider using `forcats::fct_explicit_na`"
"0","reftable <- bind_rows(front_reftable,rear_reftable) %>% filter(!is.na(RTmin),!is.na(Analyte))"
"2","Unequal factor levels: coercing to character"
"2","binding character and factor vector, coercing into character vector"
"2","binding character and factor vector, coercing into character vector"
"0","#This function does not really get called on its own, typically only called by AssignAnalytes"
"0","#This function is just a for loop, but when I run it as a for loop it takes ~10x times longer"
"0","analyteAssignment <- function(inputRT,refRTtable,inputColID){"
"0","  #I had a lot of data formatting/extraction issues, so there is a lot of type forcing going on"
"0","  inputRT <- as.double(unlist(inputRT))"
"0","  refRTtable <- refRTtable %>% filter(as.double(unlist(ColID)) == as.double(unlist(inputColID)))"
"0","  for(i in 1:nrow(refRTtable)){"
"0","    if(between(inputRT, (as.double(refRTtable[i,3])),(as.double(refRTtable[i,4])))){"
"0","      return(as.character(unlist(refRTtable[i,2])))"
"0","    }"
"0","  }"
"0","  return(NA)"
"0","}"
"0",""
"0","AssignAnalytes <- function(DF,ExcludedCurves = NA,PeaktoCompoundMap = PeaktoCompound, DefRefTable = NA){"
"0","  #This is just because I need to pass ColID into the analyte assignment function"
"0","  ColList <- DF %>% distinct(ColID) %>% as.list(.)"
"0","  refRTtable <- DefRefTable"
"0","  #A reference RT table can abe provided, but that typically only happens after this call mis-assigns "
"0","  if(is.na(refRTtable)){"
"0","    refRTtable <-  DF %>% makeRTRefTable(ExcludedCurves = ExcludedCurves,PeaktoCompoundMap)}"
"0","  ParsedDF <- tibble()"
"0","  for(x in ColList[[1]]){"
"0","    ParsedDF <- DF %>% filter(!is.na(RT), ColID == x)%>% "
"0","      mutate(Analyte = map_chr(RT, function(y) as.character(analyteAssignment(y,refRTtable,x)))) %>% "
"0","      select(-PeakNum) %>% bind_rows(ParsedDF,.)"
"0","  }"
"0","  #This is just done to make the data present in an order that makes sense"
"0","  ParsedDF <- ParsedDF %>% mutate(Analyte = factor(Analyte, levels = scfa_levels))"
"0","  return(ParsedDF)"
"0","}"
"0",""
"0","assigned_data <- reformated_data %>% "
"0","  AssignAnalytes(DefRefTable = reftable)"
"2","the condition has length > 1 and only the first element will be used"
"0","#Plot of assigned data"
"0","assigned_data %>%"
"0","  filter(grepl(""[A,G]"",Exp)) %>% "
"0","  ggplot(mapping = aes(x = RT, y = Area, color = Analyte, shape = SampleType))+geom_point()+facet_wrap(~ColID)+"
"0","  coord_cartesian(xlim = c(1,4), ylim = c(-.5,2500))"
